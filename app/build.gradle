apply plugin: 'com.android.application'
apply plugin: 'com.ceabie.dexnkife'

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//buildscript {
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'org.aspectj:aspectjtools:1.8.9'
//        classpath 'org.aspectj:aspectjweaver:1.8.9'
//    }
//}
//repositories {
//    mavenCentral()
//}
//final def log = project.logger
//final def variants = project.android.applicationVariants
//
//variants.all { variant ->
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }
//
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}



apply plugin: 'android-aspectjx'
aspectjx {
    //织入遍历符合条件的库
    includeJarFilter 'module_aspectj', "LibUtils"
}


android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.luyao"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

}




configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:22.1.0'
}



dependencies {
    compile project(':lib_module_aspectj')
    compile project(':lib_multidex')
    compile project(':lib_plugin')
    compile project(':lib_view')
    compile project(':lib_constraintlayout')
    compile project(':lib_h5')
    compile project(':lib_aidl')
    compile rootProject.ext.deps.androidAppcompat
    compile rootProject.ext.deps.recyclerview
    compile 'com.android.support.constraint:constraint-layout:1.1.2'

//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile files('libs/aspectjrt.jar')
//    compile 'org.aspectj:aspectjtools:1.8.9'
}
